// {{.Node.Name}}_List is a list of {{.Node.Name}}.
type {{.Node.Name}}_List struct{ {{.G.Capnp}}.List }

// New{{.Node.Name}} creates a new list of {{.Node.Name}}.
func New{{.Node.Name}}_List(s *{{.G.Capnp}}.Segment, sz int32) ({{.Node.Name}}_List, error) {
	l, err := {{.G.Capnp}}.NewCompositeList(s, {{.G.ObjectSize .Node}}, sz)
	return {{.Node.Name}}_List{l}, err
}

func (s {{.Node.Name}}_List) At(i int) {{.Node.Name}} { return {{.Node.Name}}{ s.List.Struct(i) } }

func (s {{.Node.Name}}_List) Set(i int, v {{.Node.Name}}) error { return s.List.SetStruct(i, v.Struct) }

func (s {{ .Node.Name }}_List) Copy(seg *capnp.Segment) ({{ .Node.Name }}_List, error) {
	var err error
	t, err := New{{ .Node.Name }}_List(seg, int32(s.Len()))
	if err != nil {
		return t, err
	}
	for i := 0; i < s.Len(); i++ {
		t.Set(i, s.At(i))
	}
	return t, nil
}
