func (s {{.Node.Name}}) {{.Field.Name|title}}(e ErrorSet) {{.FieldType}} {
	p, err := s.Struct.Ptr({{.Field.Slot.Offset}})
	{{if .Default.IsValid -}}
	if err != nil {
		e = append(e, err)
		return {{.FieldType}}{}
	}
	l, err := p.ListDefault({{.Default}})
	if err != nil {
		e = append(e, err)
		return {{.FieldType}}{}
	}
	return {{.FieldType}}{List: l}
	{{- else -}}
	return {{.FieldType}}{List: p.List()}
	{{- end}}
}

{{template "_hasfield" .}}

func (s {{.Node.Name}}) Set{{.Field.Name|title}}(v {{.FieldType}}) error {
	{{template "_settag" . -}}
	return s.Struct.SetPtr({{.Field.Slot.Offset}}, v.List.ToPtr())
}

// New{{.Field.Name|title}} sets the {{.Field.Name}} field to a newly
// allocated {{.FieldType}}, preferring placement in s's segment.
func (s {{.Node.Name}}) New{{.Field.Name|title}}(n int32) ({{.FieldType}}, error) {
	{{template "_settag" . -}}
	l, err := {{.G.RemoteTypeNew .Field.Slot.Type .Node}}(s.Struct.Segment(), n)
	if err != nil {
		return {{.FieldType}}{}, err
	}
	err = s.Struct.SetPtr({{.Field.Slot.Offset}}, l.List.ToPtr())
	return l, err
}

